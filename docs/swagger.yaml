basePath: /
definitions:
  domain.Task:
    properties:
      createdAt:
        type: string
      description:
        type: string
      dueAt:
        type: string
      id:
        type: integer
      name:
        type: string
      priority:
        type: integer
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  http.CreateTaskRequest:
    properties:
      task:
        $ref: '#/definitions/http.Task'
    required:
    - task
    type: object
  http.Task:
    properties:
      description:
        example: description of my-task-1
        type: string
      dueAt:
        example: "2019-10-12T07:20:50.52Z"
        type: string
      name:
        example: my-task-1
        type: string
      priority:
        example: 1
        format: int64
        type: integer
      userId:
        example: johndoe
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server that manages tasks.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Tasks service
  version: "1.0"
paths:
  /tasks/:
    delete:
      consumes:
      - application/json
      description: Deletes all the tasks.
      parameters:
      - description: the id of the caller
        in: header
        name: CallerId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Delete all tasks
      tags:
      - write
    get:
      consumes:
      - application/json
      description: Reads and returns all the tasks.
      parameters:
      - description: the id of the caller
        in: header
        name: CallerId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Task'
            type: array
        default:
          description: unexpected error
          schema:
            type: string
      summary: Get all tasks
      tags:
      - read
    post:
      consumes:
      - application/json
      description: Creates a new task.
      parameters:
      - description: New task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/http.CreateTaskRequest'
      - description: the id of the caller
        in: header
        name: CallerId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Creates task
      tags:
      - write
  /tasks/{taskid}:
    delete:
      consumes:
      - application/json
      description: Deletes a single task.
      parameters:
      - description: Task ID
        in: path
        name: taskid
        required: true
        type: integer
      - description: the id of the caller
        in: header
        name: CallerId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Deletes task
      tags:
      - write
    get:
      consumes:
      - application/json
      description: Reads a single task and returns it.
      parameters:
      - description: Task ID
        in: path
        name: taskid
        required: true
        type: integer
      - description: the id of the caller
        in: header
        name: CallerId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
        "401":
          description: not found
          schema:
            type: string
        default:
          description: unexpected error
          schema:
            type: string
      summary: Get task
      tags:
      - read
swagger: "2.0"
